(None, 1, '#[macro_use]')
(None, 2, 'extern crate lazy_static;')
(None, 3, '#[allow(dead_code)]')
(None, 4, 'use std::collections::HashMap;')
(None, 5, 'use std::env;')
(None, 6, 'use std::fs;')
(None, 7, 'use std::sync::Mutex;')
(None, 8, 'use substring::Substring;')
(None, 9, 'mod z_std;')
(None, 10, '')
(None, 11, 'lazy_static! {')
(None, 12, '    static ref VARIABLES: Mutex<HashMap<String, Variable>> = {')
(None, 13, '        let m = HashMap::new();')
(None, 14, '        Mutex::new(m)')
(None, 15, '    };')
(None, 16, '}')
(None, 17, 'fn main() {')
(None, 18, '    let args: Vec<String> = env::args().collect();')
(None, 19, '    if args.len() > 1 {')
(None, 20, '        let contents = fs::read_to_string(&args[1]).expect("could not read file");')
(None, 21, '        interpret(&contents);')
(None, 22, '    } else {')
(None, 23, '        panic!("no file provided");')
(None, 24, '    }')
(None, 25, '}')
(None, 26, 'fn interpret(file: &str) {')
(None, 27, '    let mut input = String::from(file);')
(None, 28, '    while input.len() > 0 {')
(None, 29, '        let remainder = consume(&input);')
(None, 30, '        input = remainder.clone();')
(None, 31, '    }')
(None, 32, '}')
(None, 33, 'fn consume(line: &str) -> String {')
(None, 34, '    //when consume is called, we are expected to be at an empty block')
(None, 35, '    let top: Vec<&str> = line.split(" ").collect();')
(None, 36, '    let word: &str = top[0];')
(None, 37, '    let vars = VARIABLES.lock().unwrap();')
(None, 38, '    // println!("{}", word);')
(None, 39, '    match word {')
(None, 40, '        _ => {')
(None, 41, '            if z_std::std.get().contains_key(word) {')
(None, 42, '                drop(vars);')
(None, 43, '                return consume_std(line);')
(None, 44, '            } else if vars.contains_key(word) {')
(None, 45, '                drop(vars);')
(None, 46, '                return consume_variable(word, line);')
(None, 47, '            }')
(None, 48, '            println!("{} is a undefined keyword", word);')
(None, 49, '            return "".to_string();')
(None, 50, '            // panic!("{} is a undefined keyword", word);')
(None, 51, '        }')
(None, 52, '    }')
(None, 53, '}')
(None, 54, 'fn consume_std(code: &str) -> String {')
(None, 55, '    match code.find("\\n") {')
(None, 56, '        Some(index) => {')
(None, 57, '            let line = code.substring(0, index);')
(None, 58, '            let remainder = code.substring(index + 1, code.len());')
(None, 59, '')
(None, 60, '            let lineindex = code.find(" ").unwrap();')
(None, 61, '            let keyword = line.substring(0, lineindex);')
(None, 62, '            let argstring: &str = line.substring(lineindex + 1, line.len());')
(None, 63, '            let args: Vec<&str> = argstring.split(",").collect();')
(None, 64, '')
(None, 65, '            match keyword {')
(None, 66, '                "print" => println!("from code: {}", evaluate_expression(args[0])),')
(None, 67, '                _ => println!("keyword {} is not defined", keyword),')
(None, 68, '            }')
(None, 69, '            return remainder.to_string();')
(None, 70, '        }')
(None, 71, '        None => "".to_string(),')
(None, 72, '    }')
(None, 73, '}')
(None, 74, 'fn evaluate_expression(expression: &str) -> Variable {')
(None, 75, '    println!("evaluating the expression {}", expression);')
(None, 76, '    let args: Vec<&str> = expression.split(" ").collect();')
(None, 77, '    let mut evaluated: String = String::default();')
(None, 78, '    let mut vars = VARIABLES.lock().unwrap();')
(None, 79, '')
(None, 80, '    let mut varbuffer: Vec<Variable> = Vec::new();')
(None, 81, '    for arg in args {')
(None, 82, '        if vars.contains_key(arg) {')
(None, 83, '            varbuffer.push(vars.get(arg).unwrap().clone());')
(None, 84, '        } else if match arg.parse::<i32>() {')
(None, 85, '            Ok(n) => {')
(None, 86, '                varbuffer.push(Variable::Int(n));')
(None, 87, '                true')
(None, 88, '            }')
(None, 89, '            Err(_) => false,')
(None, 90, '        } {')
(None, 91, '        } else {')
(None, 92, '            match arg.chars().nth(0).unwrap() {')
(None, 93, '                \'"\' => varbuffer.push(Variable::Str(')
(None, 94, '                    arg.to_string().substring(1, arg.len() - 1).to_string(),')
(None, 95, '                )),')
(None, 96, '                _ => throw(&format!("couldn\'t find expression {}", arg)),')
(None, 97, '            }')
(None, 98, '        }')
(None, 99, '    }')
(None, 100, '    return Variable::Str(evaluated);')
(None, 101, '}')
(None, 102, 'fn throw(err: &str) {')
(None, 103, '    println!("error occured when parsing {}", err)')
(None, 104, '}')
(None, 105, '#[derive(Debug, Clone)]')
(None, 106, 'enum Variable {')
(None, 107, '    Str(String),')
(None, 108, '    Int(i32),')
(None, 109, '    Bool(bool),')
(None, 110, '    None,')
(None, 111, '}')
(None, 112, '')
(None, 113, 'impl std::fmt::Display for Variable {')
(None, 114, '    // This trait requires `fmt` with this exact signature.')
(None, 115, '    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {')
(None, 116, '        // Write strictly the first element into the supplied output')
(None, 117, '        // stream: `f`. Returns `fmt::Result` which indicates whether the')
(None, 118, '        // operation succeeded or failed. Note that `write!` uses syntax which')
(None, 119, '        // is very similar to `println!`.')
(None, 120, '        match *self {')
(None, 121, '            Variable::Str(ref string) => write!(f, "{}", string),')
(None, 122, '            Variable::Int(ref int) => write!(f, "{}", int),')
(None, 123, '            Variable::Bool(ref bool) => write!(f, "{}", bool),')
(None, 124, '            Variable::None => write!(f, "{}", "None"),')
(None, 125, '        }')
(None, 126, '    }')
(None, 127, '}')
('CoolElectronics', 'add code\n')
(9, None, 'mod z_std;')
(None, 9, '// mod z_std;')
(None, 10, '// use z_std::Std;')
(None, 20, '')
(41, None, '            if z_std::std.get().contains_key(word) {')
(None, 43, '            if true {')
(46, None, '                return consume_variable(word, line);')
(55, None, '    match code.find("\\n") {')
(56, None, '        Some(index) => {')
(57, None, '            let line = code.substring(0, index);')
(58, None, '            let remainder = code.substring(index + 1, code.len());')
(None, 56, "    let code: (String, String) = split_string(code, '\\n');")
(60, None, '            let lineindex = code.find(" ").unwrap();')
(61, None, '            let keyword = line.substring(0, lineindex);')
(62, None, '            let argstring: &str = line.substring(lineindex + 1, line.len());')
(63, None, '            let args: Vec<&str> = argstring.split(",").collect();')
(None, 58, "    let kargs = split_string(&code.0, ' ');")
(None, 59, '    let args: Vec<&str> = kargs.1.split(",").collect();')
(65, None, '            match keyword {')
(66, None, '                "print" => println!("from code: {}", evaluate_expression(args[0])),')
(67, None, '                _ => println!("keyword {} is not defined", keyword),')
(68, None, '            }')
(69, None, '            return remainder.to_string();')
(70, None, '        }')
(71, None, '        None => "".to_string(),')
(None, 61, '    match kargs.0.as_str() {')
(None, 62, '        "print" => println!("from code: {}", evaluate_expression(args[0])),')
(None, 63, '        _ => println!("keyword {} is not defined", kargs.0),')
(None, 64, '    }')
(None, 65, '    return code.1;')
(None, 66, '}')
(None, 67, 'fn split_string(input: &str, character: char) -> (String, String) {')
(None, 68, '    match input.find(character) {')
(None, 69, '        Some(index) => (')
(None, 70, '            input.substring(0, index).to_string(),')
(None, 71, '            input.substring(index + 1, input.len()).to_string(),')
(None, 72, '        ),')
(None, 73, '        None => (input.to_string(), String::default()),')
(None, 76, '')
(77, None, '    let mut evaluated: String = String::default();')
(78, None, '    let mut vars = VARIABLES.lock().unwrap();')
(None, 80, '    let mut evaluated: Variable;')
(None, 81, '    let vars = VARIABLES.lock().unwrap();')
(80, None, '    let mut varbuffer: Vec<Variable> = Vec::new();')
(None, 83, '    let mut varbuffer: Vec<PreExpression> = Vec::new();')
(83, None, '            varbuffer.push(vars.get(arg).unwrap().clone());')
(None, 86, '            varbuffer.push(PreExpression::Variable(vars.get(arg).unwrap().clone()));')
(86, None, '                varbuffer.push(Variable::Int(n));')
(None, 89, '                varbuffer.push(PreExpression::Variable(Variable::Int(n)));')
(None, 94, '        } else if match arg {')
(None, 95, '            "+" => {')
(None, 96, '                varbuffer.push(PreExpression::PLUS);')
(None, 97, '                true')
(None, 98, '            }')
(None, 99, '            "-" => {')
(None, 100, '                varbuffer.push(PreExpression::MINUS);')
(None, 101, '                true')
(None, 102, '            }')
(None, 103, '            "*" => {')
(None, 104, '                varbuffer.push(PreExpression::MULTIPLY);')
(None, 105, '                true')
(None, 106, '            }')
(None, 107, '            "/" => {')
(None, 108, '                varbuffer.push(PreExpression::DIVIDE);')
(None, 109, '                true')
(None, 110, '            }')
(None, 111, '            _ => false,')
(None, 112, '        } {')
(93, None, '                \'"\' => varbuffer.push(Variable::Str(')
(None, 115, '                \'"\' => varbuffer.push(PreExpression::Variable(Variable::Str(')
(95, None, '                )),')
(None, 117, '                ))),')
(100, None, '    return Variable::Str(evaluated);')
(None, 122, '    evaluated = match varbuffer[0] {')
(None, 123, '        PreExpression::Variable(ref v) => v.clone(),')
(None, 124, '        _ => panic!(),')
(None, 125, '    };')
(None, 126, '    varbuffer.remove(0);')
(None, 127, '    for exp in varbuffer {')
(None, 128, '        // println!("{:?}", exp);')
(None, 129, '        match exp {')
(None, 130, '            PreExpression::Variable(ref var) => {')
(None, 131, '                evaluated = match var {')
(None, 132, '                    Variable::Str(ref string) => Variable::Str(format!("{}", evaluated) + string),')
(None, 133, '                    Variable::Int(ref int) => match evaluated {')
(None, 134, '                        Variable::Int(ref computed) => Variable::Int(computed + int),')
(None, 135, '                        _ => Variable::Str(format!("{}", evaluated) + &int.to_string()),')
(None, 136, '                    },')
(None, 137, '                    Variable::Bool(ref bool) => {')
(None, 138, '                        Variable::Str(format!("{}", evaluated) + &bool.to_string())')
(None, 139, '                    }')
(None, 140, '                    Variable::None => evaluated,')
(None, 141, '                }')
(None, 142, '            }')
(None, 143, '            PreExpression::PLUS => {}')
(None, 144, '            PreExpression::MINUS => {}')
(None, 145, '            PreExpression::MULTIPLY => {}')
(None, 146, '            PreExpression::DIVIDE => {}')
(None, 147, '        }')
(None, 148, '    }')
(None, 149, '    // println!("{:?}", evaluated);')
(None, 150, '    evaluated')
(None, 156, 'enum PreExpression {')
(None, 157, '    Variable(Variable),')
(None, 158, '    PLUS,')
(None, 159, '    MINUS,')
(None, 160, '    MULTIPLY,')
(None, 161, '    DIVIDE,')
(None, 162, '}')
(None, 163, '#[derive(Debug, Clone)]')
(124, None, '            Variable::None => write!(f, "{}", "None"),')
(None, 182, '            Variable::None => write!(f, "{}", ""),')
(None, 183, '        }')
(None, 184, '    }')
(None, 185, '}')
(None, 186, 'impl std::fmt::Display for PreExpression {')
(None, 187, '    // This trait requires `fmt` with this exact signature.')
(None, 188, '    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {')
(None, 189, '        // Write strictly the first element into the supplied output')
(None, 190, '        // stream: `f`. Returns `fmt::Result` which indicates whether the')
(None, 191, '        // operation succeeded or failed. Note that `write!` uses syntax which')
(None, 192, '        // is very similar to `println!`.')
(None, 193, '        match *self {')
(None, 194, '            PreExpression::Variable(ref var) => write!(f, "{}", var),')
(None, 195, '            _ => write!(f, "{:?}", *self),')
('CoolElectronics', '.\n')
(1, None, '#[macro_use]')
(2, None, 'extern crate lazy_static;')
(3, None, '#[allow(dead_code)]')
(4, None, 'use std::collections::HashMap;')
(5, None, 'use std::env;')
(6, None, 'use std::fs;')
(7, None, 'use std::sync::Mutex;')
(8, None, 'use substring::Substring;')
(9, None, '// mod z_std;')
(10, None, '// use z_std::Std;')
(11, None, '')
(12, None, 'lazy_static! {')
(13, None, '    static ref VARIABLES: Mutex<HashMap<String, Variable>> = {')
(14, None, '        let m = HashMap::new();')
(15, None, '        Mutex::new(m)')
(16, None, '    };')
(17, None, '}')
(18, None, 'fn main() {')
(19, None, '    let args: Vec<String> = env::args().collect();')
(20, None, '')
(21, None, '    if args.len() > 1 {')
(22, None, '        let contents = fs::read_to_string(&args[1]).expect("could not read file");')
(23, None, '        interpret(&contents);')
(24, None, '    } else {')
(25, None, '        panic!("no file provided");')
(26, None, '    }')
(27, None, '}')
(28, None, 'fn interpret(file: &str) {')
(29, None, '    let mut input = String::from(file);')
(30, None, '    while input.len() > 0 {')
(31, None, '        let remainder = consume(&input);')
(32, None, '        input = remainder.clone();')
(33, None, '    }')
(34, None, '}')
(35, None, 'fn consume(line: &str) -> String {')
(36, None, '    //when consume is called, we are expected to be at an empty block')
(37, None, '    let top: Vec<&str> = line.split(" ").collect();')
(38, None, '    let word: &str = top[0];')
(39, None, '    let vars = VARIABLES.lock().unwrap();')
(40, None, '    // println!("{}", word);')
(41, None, '    match word {')
(42, None, '        _ => {')
(43, None, '            if true {')
(44, None, '                drop(vars);')
(45, None, '                return consume_std(line);')
(46, None, '            } else if vars.contains_key(word) {')
(47, None, '                drop(vars);')
(48, None, '            }')
(49, None, '            println!("{} is a undefined keyword", word);')
(50, None, '            return "".to_string();')
(51, None, '            // panic!("{} is a undefined keyword", word);')
(52, None, '        }')
(53, None, '    }')
(54, None, '}')
(55, None, 'fn consume_std(code: &str) -> String {')
(56, None, "    let code: (String, String) = split_string(code, '\\n');")
(57, None, '')
(58, None, "    let kargs = split_string(&code.0, ' ');")
(59, None, '    let args: Vec<&str> = kargs.1.split(",").collect();')
(60, None, '')
(61, None, '    match kargs.0.as_str() {')
(62, None, '        "print" => println!("from code: {}", evaluate_expression(args[0])),')
(63, None, '        _ => println!("keyword {} is not defined", kargs.0),')
(64, None, '    }')
(65, None, '    return code.1;')
(66, None, '}')
(67, None, 'fn split_string(input: &str, character: char) -> (String, String) {')
(68, None, '    match input.find(character) {')
(69, None, '        Some(index) => (')
(70, None, '            input.substring(0, index).to_string(),')
(71, None, '            input.substring(index + 1, input.len()).to_string(),')
(72, None, '        ),')
(73, None, '        None => (input.to_string(), String::default()),')
(74, None, '    }')
(75, None, '}')
(76, None, '')
(77, None, 'fn evaluate_expression(expression: &str) -> Variable {')
(78, None, '    println!("evaluating the expression {}", expression);')
(79, None, '    let args: Vec<&str> = expression.split(" ").collect();')
(80, None, '    let mut evaluated: Variable;')
(81, None, '    let vars = VARIABLES.lock().unwrap();')
(82, None, '')
(83, None, '    let mut varbuffer: Vec<PreExpression> = Vec::new();')
(84, None, '    for arg in args {')
(85, None, '        if vars.contains_key(arg) {')
(86, None, '            varbuffer.push(PreExpression::Variable(vars.get(arg).unwrap().clone()));')
(87, None, '        } else if match arg.parse::<i32>() {')
(88, None, '            Ok(n) => {')
(89, None, '                varbuffer.push(PreExpression::Variable(Variable::Int(n)));')
(90, None, '                true')
(91, None, '            }')
(92, None, '            Err(_) => false,')
(93, None, '        } {')
(94, None, '        } else if match arg {')
(95, None, '            "+" => {')
(96, None, '                varbuffer.push(PreExpression::PLUS);')
(97, None, '                true')
(98, None, '            }')
(99, None, '            "-" => {')
(100, None, '                varbuffer.push(PreExpression::MINUS);')
(101, None, '                true')
(102, None, '            }')
(103, None, '            "*" => {')
(104, None, '                varbuffer.push(PreExpression::MULTIPLY);')
(105, None, '                true')
(106, None, '            }')
(107, None, '            "/" => {')
(108, None, '                varbuffer.push(PreExpression::DIVIDE);')
(109, None, '                true')
(110, None, '            }')
(111, None, '            _ => false,')
(112, None, '        } {')
(113, None, '        } else {')
(114, None, '            match arg.chars().nth(0).unwrap() {')
(115, None, '                \'"\' => varbuffer.push(PreExpression::Variable(Variable::Str(')
(116, None, '                    arg.to_string().substring(1, arg.len() - 1).to_string(),')
(117, None, '                ))),')
(118, None, '                _ => throw(&format!("couldn\'t find expression {}", arg)),')
(119, None, '            }')
(120, None, '        }')
(121, None, '    }')
(122, None, '    evaluated = match varbuffer[0] {')
(123, None, '        PreExpression::Variable(ref v) => v.clone(),')
(124, None, '        _ => panic!(),')
(125, None, '    };')
(126, None, '    varbuffer.remove(0);')
(127, None, '    for exp in varbuffer {')
(128, None, '        // println!("{:?}", exp);')
(129, None, '        match exp {')
(130, None, '            PreExpression::Variable(ref var) => {')
(131, None, '                evaluated = match var {')
(132, None, '                    Variable::Str(ref string) => Variable::Str(format!("{}", evaluated) + string),')
(133, None, '                    Variable::Int(ref int) => match evaluated {')
(134, None, '                        Variable::Int(ref computed) => Variable::Int(computed + int),')
(135, None, '                        _ => Variable::Str(format!("{}", evaluated) + &int.to_string()),')
(136, None, '                    },')
(137, None, '                    Variable::Bool(ref bool) => {')
(138, None, '                        Variable::Str(format!("{}", evaluated) + &bool.to_string())')
(139, None, '                    }')
(140, None, '                    Variable::None => evaluated,')
(141, None, '                }')
(142, None, '            }')
(143, None, '            PreExpression::PLUS => {}')
(144, None, '            PreExpression::MINUS => {}')
(145, None, '            PreExpression::MULTIPLY => {}')
(146, None, '            PreExpression::DIVIDE => {}')
(147, None, '        }')
(148, None, '    }')
(149, None, '    // println!("{:?}", evaluated);')
(150, None, '    evaluated')
(151, None, '}')
(152, None, 'fn throw(err: &str) {')
(153, None, '    println!("error occured when parsing {}", err)')
(154, None, '}')
(155, None, '#[derive(Debug, Clone)]')
(156, None, 'enum PreExpression {')
(157, None, '    Variable(Variable),')
(158, None, '    PLUS,')
(159, None, '    MINUS,')
(160, None, '    MULTIPLY,')
(161, None, '    DIVIDE,')
(162, None, '}')
(163, None, '#[derive(Debug, Clone)]')
(164, None, 'enum Variable {')
(165, None, '    Str(String),')
(166, None, '    Int(i32),')
(167, None, '    Bool(bool),')
(168, None, '    None,')
(169, None, '}')
(170, None, '')
(171, None, 'impl std::fmt::Display for Variable {')
(172, None, '    // This trait requires `fmt` with this exact signature.')
(173, None, '    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {')
(174, None, '        // Write strictly the first element into the supplied output')
(175, None, '        // stream: `f`. Returns `fmt::Result` which indicates whether the')
(176, None, '        // operation succeeded or failed. Note that `write!` uses syntax which')
(177, None, '        // is very similar to `println!`.')
(178, None, '        match *self {')
(179, None, '            Variable::Str(ref string) => write!(f, "{}", string),')
(180, None, '            Variable::Int(ref int) => write!(f, "{}", int),')
(181, None, '            Variable::Bool(ref bool) => write!(f, "{}", bool),')
(182, None, '            Variable::None => write!(f, "{}", ""),')
(183, None, '        }')
(184, None, '    }')
(185, None, '}')
(186, None, 'impl std::fmt::Display for PreExpression {')
(187, None, '    // This trait requires `fmt` with this exact signature.')
(188, None, '    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {')
(189, None, '        // Write strictly the first element into the supplied output')
(190, None, '        // stream: `f`. Returns `fmt::Result` which indicates whether the')
(191, None, '        // operation succeeded or failed. Note that `write!` uses syntax which')
(192, None, '        // is very similar to `println!`.')
(193, None, '        match *self {')
(194, None, '            PreExpression::Variable(ref var) => write!(f, "{}", var),')
(195, None, '            _ => write!(f, "{:?}", *self),')
(196, None, '        }')
(197, None, '    }')
(198, None, '}')
('CoolElectronics', 'redo entire project\n')
